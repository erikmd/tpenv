#!/usr/bin/env bash
ts="Time-stamp: <2018-09-07 01:02:22 emartin>"; ts=${ts#Time-stamp: }
version="0.2-git"
#
# Copyright (c) 2018  Érik Martin-Dorel
#
# Licensed under BSD-3 <https://opensource.org/licenses/BSD-3-Clause>
#
# Report bugs to: https://github.com/erikmd/tpenv/issues

die_hard() {
    printf "%b\n" "$*" >&2
    exit 1
}

warn() {
    printf "%b\n" "$*" >&2
}

prog="tpenv"
netdir="$HOME/Documents"
netsubdir="$netdir/Linux"
config="$netsubdir/_tpenv"
f_std="$config/std_includes.txt"
f_includes="$config/custom_includes.txt"
f_excludes="$config/custom_excludes.txt"
url="https://github.com/erikmd/tpenv/raw/master"
verbose="false"
curl_error="Erreur: Problème réseau ?"

check_windows() {
    [ "$(uname -s)" = "Linux" ] || die_hard "Erreur: ce script est conçu pour Linux uniquement."
}

warn_if_other_folder() {
    local this srcdir
    this="${BASH_SOURCE[0]}"
    srcdir=$( cd "$( dirname "$this" )" >/dev/null && pwd )

    if [ "$srcdir" != "$netsubdir/bin" ]; then
        warn "\nWarning: $prog n'est pas dans le dossier standard. Pour y remédier :"
        [ -d "$netsubdir/bin" ] || warn "  mkdir $netsubdir/bin"
        warn "  cp '$this' '$netsubdir/bin/$prog'"

    fi
}

ensure_dir_exists() {
    local folder="$1"
    if [ -d "$folder" ] && [ -w "$folder" ] && [ -x "$folder" ]; then
        warn "Dossier '$folder'...OK"
        # return 0
    elif [ ! -e "$folder" ]; then
        warn "Création du dossier '$folder'..."
        mkdir "$folder" || die_hard "Erreur lors de la création de '$folder'."
        # return 1
    else
        die_hard "Erreur: '$folder' n'est pas un dossier valide."
    fi
}

check_config_or_init_empty() {
    ensure_dir_exists "$netsubdir"
    ensure_dir_exists "$config"

    inspect="false"

    if [ ! -f "$f_std" ]; then
        warn "Récupération du fichier '$f_std'..."
        ( set -x; curl -o "$f_std" -L "$url/std_includes.txt" ) || { ret=$?; warn "$curl_error"; exit $ret; }
        inspect="true"
    fi
    if [ ! -f "$f_includes" ]; then
        warn "Création du fichier '$f_includes'..."
        touch "$f_includes"
        inspect="true"
    fi
    if [ ! -f "$f_excludes" ]; then
        warn "Création du fichier '$f_excludes'..."
        touch "$f_excludes"
        inspect="true"
    fi

    if [ "$inspect" = "true" ]; then
        warn "La configuration initiale de $prog a été créée dans '$config'."
        die_hard "Vous pouvez l'inspecter si nécessaire, puis relancer $prog."
    fi
}

is_among() {
    local arg="$1"
    shift
    local elt
    for elt; do
        if [ "$arg" = "$elt" ]; then
            return 0
        fi
    done
    return 1
}

check_unwanted_chars_in_line_of_file() {
    local line="$1"
    local file="$2"
    [[ $line =~ "#" ]] && die_hard "Erreur: caractère '#' interdit dans $file (sauf en début de ligne)."
    [[ $line =~ [?*] ]] && die_hard "Erreur: caractères '?' et '*' interdits dans $file."
    [[ $line =~ "/" ]] && die_hard "Erreur: caractère '/' interdit dans $file (sauf en fin de ligne)."
    [[ $line = "." ]] && die_hard "Erreur: dossier '.' interdit dans $file."
    [[ $line = ".." ]] && die_hard "Erreur: dossier '..' interdit dans $file."
}

process_files_or_dirs() {
    local is_dir="$1"
    local p
    shift
    for p; do
        if [ ! -e "$HOME/$p" ] && [ ! -L "$HOME/$p" ]; then
            if [ ! -e "$netsubdir/$p" ]; then
                # If $HOME/$p doesn’t exist & $netsubdir/$p doesn’t exist: (Mkdir/Touch); Symlink

                if [ "$is_dir" = "true" ]; then
                    mkdir -v "$netsubdir/$p" || { ret=$?; warn "Erreur: mkdir '$netsubdir/$p'."; exit $ret; }
                else
                    touch "$netsubdir/$p"
                fi
                echo -n "LINK: "; ln -sv "$netsubdir/$p" "$HOME/$p"
            else
                # If $HOME/$p doesn’t exist & $netsubdir/$p exists: Symlink

                echo -n "LINK: "; ln -sv "$netsubdir/$p" "$HOME/$p"
            fi
        elif [ ! -e "$netsubdir/$p" ] && [ ! -L "$HOME/$p" ]; then
            # If $HOME/$p exists & $netsubdir/$p doesn’t exist: Move; Symlink

            echo -n "MOVE: "; mv -v "$HOME/$p" "$netsubdir/$p"
            echo -n "LINK: "; ln -sv "$netsubdir/$p" "$HOME/$p"
        elif [ ! -L "$HOME/$p" ]; then
            # If $HOME/$p exists & $netsubdir/$p exists & no symlink: Rename-Left; Symlink

             if [ -d "$HOME/$p" ]; then
                 T=$(mktemp -u --directory "$HOME/$p.XXX")
             else
                 T=$(mktemp -u "$HOME/$p.XXX")
             fi
             echo -n "BACKUP: "; mv -v "$HOME/$p" "$T"
             echo -n "LINK: "; ln -sv "$netsubdir/$p" "$HOME/$p"
        else
            to=$(readlink "$HOME/$p")
            # If $HOME/$p exists & $netsubdir/$p exists & good symlink: No-op

            if [ "$to" != "$netsubdir/$p" ]; then
                warn "Warning: '$HOME/$p' pointe sur '$to' au lieu de '$netsubdir/$p'."
            fi
        fi
    done
}

sync() {
    [ -d "$netdir" ] || die_hard "Erreur: dossier '$netdir' inexistant."
    check_config_or_init_empty

    readarray -t raw_std < "$f_std"
    readarray -t raw_includes < "$f_includes"
    readarray -t raw_excludes < "$f_excludes"

    declare -a includes_dirs
    declare -a includes_files
    declare -a excludes
    cr=$'\015'
    # Remove comments and duplicates
    for line in "${raw_excludes[@]}"; do
        line=${line%$cr}  # skip trailing CR
        [[ $line =~ ^[$' \t']*$ ]] && continue  # skip blank lines
        [[ $line =~ .. ]] && line=${line%/}  # skip trailing slash FOR EXCLUDES
        if [[ ! $line =~ ^"#" ]] && ! is_among "$line" "${excludes[@]}"; then
            check_unwanted_chars_in_line_of_file "$line" "'$f_excludes'"
            excludes+=( "$line" )
        fi
    done
    for line in "${raw_std[@]}" "${raw_includes[@]}"; do
        line=${line%$cr}  # skip trailing CR
        [[ $line =~ ^[$' \t']*$ ]] && continue  # skip blank lines
        if [[ ! $line =~ ^"#" ]]; then
            if [[ $line =~ /$ ]]; then # directory
                line=${line%/}
                if ! is_among "$line" "${includes_dirs[@]}" "${excludes[@]}"; then
                    check_unwanted_chars_in_line_of_file "$line" "'$f_std' et '$f_includes'"
                    includes_dirs+=( "$line" )
                fi
            else # file
                if ! is_among "$line" "${includes_files[@]}" "${excludes[@]}"; then
                    check_unwanted_chars_in_line_of_file "$line" "'$f_std' et '$f_includes'"
                    includes_files+=( "$line" )
                fi
            fi
        fi
    done

    if [ "$verbose" = "true" ]; then
        warn "Info: $prog prend en compte les fichiers suivants:"
        for incl in "${includes_files[@]}"; do
            printf -- "- %s\n" "$incl" >&2
        done
        warn "Info: $prog prend en compte les dossiers suivants:"
        for incl in "${includes_dirs[@]}"; do
            printf -- "- %s\n" "$incl" >&2
        done
    fi

    process_files_or_dirs "false" "${includes_files[@]}"
    process_files_or_dirs "true" "${includes_dirs[@]}"

    warn_if_other_folder
}

upgrade_config() {
    ensure_dir_exists "$netsubdir"
    ensure_dir_exists "$config"

    rm -f -- "$f_std.new"
    curl -o "$f_std.new" -L "$url/std_includes.txt" || { ret=$?; warn "$curl_error"; exit $ret; }

    if ! diff -q -- "$f_std" "$f_std.new"; then
        warn "# La configuration '$f_std' a été mise à jour:"
        diff -u0 -- "$f_std" "$f_std.new"
        mv -v -f -- "$f_std.new" "$f_std"
    else
        rm -f -- "$f_std.new"
    fi
}

upgrade() {
    local src
    src=$( readlink -f "${BASH_SOURCE[0]}" )

    rm -f -- "$src.new"
    curl -o "$src.new" -L "$url/tpenv" || { ret=$?; warn "$curl_error"; exit $ret; }

    if ! diff -q -- "$src" "$src.new"; then
        mv -f -- "$src.new" "$src"
        chmod a+x "$src"
        warn "# $prog a été mis à jour (cf.  $prog --version)\n"
    else
        rm -f -- "$src.new"
    fi

    upgrade_config

    warn_if_other_folder
}

version() {
    warn "$prog version $version $ts"
}

usage() {
    version

    cat >&2 <<EOF

Syntaxe :
  $prog  # initialise la configuration lors de la première exécution
  $prog  # crée ou met à jour les liens symboliques spécifiés
         # entre ~/ et $netsubdir

  $prog -v  # mode davantage verbeux

  $prog --upgrade  # met à jour le script $prog
                   # et la liste standard des liens symboliques

  $prog --version  # affiche la version

  $prog --help  # affiche cette aide

Résumé :
  $prog est un script permettant de sauvegarder l'environnement local
  de TP (dossiers ou fichiers à la racine du répertoire ~/) en créant
  des liens symboliques vers le dossier $netsubdir,
  celui-ci étant synchronisé.

  Il suffit d'exécuter la commande $prog dans un terminal, au début de
  chaque TP sous Linux.

  La liste des fichiers ou dossiers devant être ainsi sauvegardés est
  stockée dans 3 fichiers :
    $f_std  # liste standard
    $f_includes
    $f_excludes

  La commande '$prog --upgrade' permet de mettre à jour le script et
  la liste standard.
  Si besoin, vous pouvez modifier les 2 derniers fichiers (initialement vides)
  pour spécifier une liste personnalisée de chemins à inclure ou exclure.

  Pour plus de facilité, placez le script $prog dans le dossier
  $netsubdir/bin (qui est synchronisé).
EOF
}

main() {
    check_windows

    command="default"
    # Parsing arguments
    for arg; do
        case "$arg" in
            "--version")
                version
                exit 0
                ;;
            "--help")
                usage
                exit 0
                ;;
            "--upgrade")
                command="upgrade"
                ;;
            "-v")
                verbose="true"
                ;;
            *)
                warn "Erreur: argument invalide '$arg'."
                usage
                exit 1
                ;;
        esac
    done

    warn "# $prog version $version"

    case "$command" in
        "default")
            sync
            ;;
        "upgrade")
            upgrade
            ;;
    esac
}

main "$@"

# Design/pseudo-code
#
# Put this script in $netsubdir/bin, which should be in the $PATH
#
# help command:
# - Run usage
#
# sync (default) command:
# - Check if $netdir exists (otherwise die_hard)
# - If $config doesn’t exists: Echo warning; Run init_empty
# - Retrieve the paths of $config; Echo (number of) custom incl./excl.
# - Foreach path $p:
#   - If $HOME/$p doesn’t exist & $netsubdir/$p doesn’t exist: Echo no-op
#   - If $HOME/$p exists & $netsubdir/$p doesn’t exist: Move(§); Symlink
#   - If $HOME/$p exists & $netsubdir/$p exists & symlink: No-op
#   - If $HOME/$p exists & $netsubdir/$p exists & no-ln: Rename-Left+Echo; Symlink
#   - If $HOME/$p doesn’t exist & $netsubdir/$p exists: Symlink
# (§)Remark: the move step could be done using mv, or something else…
#
# init_empty algorithm:
# - Copy default file contents to $config
#
# upgrade command:
# - curl -OL https://github.com/erikmd/tpenv/raw/master/tpenv; chmod a+x tpenv
# - Echo status (if the new script is different)
# - Check if $netdir exists (otherwise die_hard)
# - If $config exists:
#   - Check if its format changed and should be migrated
#   - Update the standard list field, don’t touch the includes, excludes fields
#   - Echo status (if _tpenv changed)
# - If $config doesn’t exists: Echo warning; Run init_empty
#
# _tpenv=_tpenv.json:
# { "version": "1",
#   "standard": [ ".bashrc", ... ], "includes": [], "excludes": [] }
#
# or _tpenv is a folder with 3 files:
# _tpenv/std_includes.txt
# _tpenv/custom_includes.txt
# _tpenv/custom_excludes.txt
# supporting #-based comments (with a description)
#
# Remarks:
# * DONE Fail if run from Windows ?
# * DONE Cope with Linux/Windows-specific EOLs
# * DONE Check if tpenv itself is in $netsubdir/bin
